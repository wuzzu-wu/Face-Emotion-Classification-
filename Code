import cv2
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

image_path = 'myface.jpg'
image = cv2.imread(image_path)

if image is None:
    raise ValueError("Image not found or unable to load.")

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

face_data = []

for (x, y, w, h) in faces:
    face_region = gray[y:y+h, x:x+w]
    face_region = cv2.resize(face_region, (48, 48))
    face_region = face_region / 255.0
    face_data.append((face_region, (x, y, w, h)))

model = tf.keras.models.Sequential([
    tf.keras.Input(shape=(48, 48, 1)),
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(256, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(512, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(7, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.load_weights('emotion_classification_weights.h5')

emotion_labels = {0: 'Angry', 1: 'Disgust', 2: 'Fear', 3: 'Happy', 4: 'Sad', 5: 'Surprise', 6: 'Neutral'}

for face_region, (x, y, w, h) in face_data:
    face_region = face_region.reshape((1, 48, 48, 1))
    predictions = model.predict(face_region)
    emotion_label = np.argmax(predictions)
    emotion_text = emotion_labels[emotion_label]
    print(f'Face detected at ({x}, {y}, {w}, {h}) with emotion {emotion_text}')
    cv2.rectangle(image, (x, y), (x+w, y+h), (255, 0, 0), 2)
    cv2.putText(image, emotion_text, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (36, 255, 12), 2)

plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Faces with Emotion Labels')
plt.axis('off')
plt.show()
